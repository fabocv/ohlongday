
from __future__ import annotations
from typing import Dict, List

# Escala fenomenol√≥gica 0‚Äì3
LABELS = {
    0: "Muy negativo / Bloqueo fuerte",
    1: "D√©bil / Retroceso",
    2: "Aceptable / En camino",
    3: "Positivo / Avance claro",
}

# Amabilidad por categor√≠a diaria
KIND_BY_CAT = {
    0: "D√≠a desafiante. Te mereces descanso y cuidado suave. Un paso peque√±o vale oro hoy.",
    1: "Hubo baches, s√≠. A√∫n as√≠, est√°s aqu√≠ y eso ya es avance. Celebra lo que s√≠ se pudo.",
    2: "Vas en camino. Sost√©n lo que funciona y date cr√©dito por tu constancia.",
    3: "¬°Bien! Notable claridad y regulaci√≥n. Agradece el cuerpo y comparte un poquito de esa luz.",
}

# Iconos por √°rea
ICONS = {
    "animo": "üòä",
    "activacion": "‚ö°",
    "sueno": "üåô",
    "conexion": "ü§ù",
    "proposito": "üéØ",
    "claridad": "üîç",
    "estres": "üî•"
}

# Etiquetas y iconos de tendencia
TREND_LABELS = {"up": "al alza", "down": "a la baja", "flat": "estable"}
TREND_ICONS = {"up": "‚¨ÜÔ∏è", "down": "‚¨áÔ∏è", "flat": "‚úîÔ∏è"}

def stack_human_messages(area_trends: Dict[str, str]) -> List[str]:
    msgs = []
    for area, trend in area_trends.items():
        label = TREND_LABELS.get(trend, "estable")
        ticon = TREND_ICONS.get(trend, "‚úîÔ∏è")
        aicon = ICONS.get(area, "‚Ä¢")
        # Normaliza el nombre del √°rea para display
        area_name = area.capitalize() if isinstance(area, str) else str(area)
        msgs.append(f"{aicon} {area_name}: {label} {ticon}")
    return msgs

def kind_for_category(cat: int) -> str:
    return KIND_BY_CAT.get(cat, "Hoy eres suficiente. Esc√∫chate con cari√±o.")
